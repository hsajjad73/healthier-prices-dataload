<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:jersey="http://www.mulesoft.org/schema/mule/jersey" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:http="http://www.mulesoft.org/schema/mule/http"  xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:context="http://www.springframework.org/schema/context" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:mongo="http://www.mulesoft.org/schema/mule/mongo" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd
http://www.mulesoft.org/schema/mule/mongo http://www.mulesoft.org/schema/mule/mongo/current/mule-mongo.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/jersey http://www.mulesoft.org/schema/mule/jersey/current/mule-jersey.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd">
    
    <mongo:config database="${database.name}" doc:name="Mongo DB" name="Mongo_DB" password="${database.password}" username="${database.user}" host="${database.host}" port="${database.port}">
        <mongo:connection-pooling-profile exhaustedAction="WHEN_EXHAUSTED_GROW" initialisationPolicy="INITIALISE_ONE"/>
    </mongo:config>
    
    <http:request-config name="ElasticSearch_Rest_Configuration" host="${elastic.host}" port="${elastic.port}" doc:name="HTTP Request Configuration" />
    <http:request-config name="Mongo_Rest_Configuration" host="${mongo-rest.host}" port="${mongo-rest.port}" doc:name="HTTP Request Configuration" />
     
    <flow  name="load-products">
    	<file:inbound-endpoint doc:name="Poll files" metadata:id="d465231a-3a94-4460-acce-174c73019323" path="src/main/resources/input" responseTimeout="10000"/>
		<dw:transform-message doc:name="CSV to Map" metadata:id="f7d8c6e6-a84d-464c-b438-ee911aded909">
            <dw:input-payload />
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map
{
	id: $.PRODUCTCODE,
	name: $.PRODUCT,
	descr: $.SHORTDESCRIPTION,
	quantity: $.QUANTITY,
	brand: $.BRAND,
	category: $.CATEGORY,
	keywords: $.KEYWORDS,
	rrp: $.RRP,
	price: $.PRICE,
	porpom: $.PORPOM
	
}]]></dw:set-payload>
        </dw:transform-message>
        <foreach doc:name="For Each">
            <json:object-to-json-transformer doc:name="Object to JSON"/>
            <logger message="saving object: #[payload]" level="INFO" doc:name="Log object to save"/>
            <http:request config-ref="ElasticSearch_Rest_Configuration" path="/healthierprices/products" method="POST" doc:name="Send to Products index"/>
        </foreach>
    </flow>


    <flow  name="load-pharmacy-prods">
    	<file:inbound-endpoint doc:name="Poll files" path="src/main/resources/inputpharma" responseTimeout="10000"/>
        <choice doc:name="Choice">
            <when expression="#[groovy:message.getInboundProperty('originalFilename').equalsIgnoreCase('Reach.csv')]">
                <set-property propertyName="PharmacyId" value="1"/>
                <set-property propertyName="PharmacyName" value="Reach Pharmacy" doc:name="Reach Pharmacy"/>
            </when>
            <when expression="#[groovy:message.getInboundProperty('originalFilename').equalsIgnoreCase('Point.csv')]">
            	<set-property propertyName="PharmacyId" value="2"/>
                <set-property propertyName="PharmacyName" value="Point Pharmacy" doc:name="Point Pharmacy"/>
            </when>
            <when expression="#[groovy:message.getInboundProperty('originalFilename').equalsIgnoreCase('PharmacyNearu.csv')]">
            	<set-property propertyName="PharmacyId" value="3"/>
                <set-property propertyName="PharmacyName" value="Pharmacy Near U" doc:name="Pharmacy Near U"/>
            </when>
            <when expression="#[groovy:message.getInboundProperty('originalFilename').equalsIgnoreCase('Pharmacy4.csv')]">
            	<set-property propertyName="PharmacyId" value="4"/>
                <set-property propertyName="PharmacyName" value="Pharmacy4" doc:name="Pharma4"/>
            </when>
            <when expression="#[groovy:message.getInboundProperty('originalFilename').equalsIgnoreCase('Pharmacy5.csv')]">
            	<set-property propertyName="PharmacyId" value="5"/>
                <set-property propertyName="PharmacyName" value="Pharmacy5" doc:name="Pharma5"/>
            </when>
            <otherwise>
				<logger level="ERROR" message="Boom!" doc:name="Logger"/>            
            </otherwise>
        </choice>
		<dw:transform-message doc:name="CSV to Map" >
            <dw:input-payload/>
            <dw:set-payload><![CDATA[%dw 1.0

%output application/java
---
payload map
{
 pharmacy : {
 	id : outboundProperties['PharmacyId'],
 	name : outboundProperties['PharmacyName']
 	},
 prod_id : $.PRODUCTCODE,
 name : $.PRODUCT,
 size : $.SIZE,
 rrp: $.LIST_PRICE,
 price: $.PRICE,
 img_lg: $.IMAGE320,
 ex_link: $.EXTERNAL_LINK
}
]]></dw:set-payload>
        </dw:transform-message>
        <foreach doc:name="For Each">
            <json:object-to-json-transformer doc:name="Object to JSON"/>
            <logger message="saving objects: #[payload]" level="INFO" doc:name="Log objects to save"/>
            <http:request config-ref="Mongo_Rest_Configuration" path="healthy/products" method="POST" doc:name="Send Pharma Prods"/>
        </foreach>
    </flow>
    
    <flow  name="load-keywords">
    	<file:inbound-endpoint doc:name="Poll files" path="src/main/resources/inputkeys" responseTimeout="10000"/>
		<dw:transform-message doc:name="CSV to Map" >
            <dw:input-payload/>
            <dw:set-payload><![CDATA[%dw 1.0

%output application/java
---
payload map
{
 name : $.PRODUCT,
 suggest : 
 {
   input : [$.KEYWORD],
   weight : 34
 }
}
]]></dw:set-payload>
        </dw:transform-message>
        <foreach doc:name="For Each">
            <json:object-to-json-transformer doc:name="Object to JSON"/>
            <logger message="saving objects: #[payload]" level="INFO" doc:name="Log objects to save"/>
            <http:request config-ref="ElasticSearch_Rest_Configuration" path="keywords/keyword?refresh=true" method="POST" doc:name="Send to Keywords index"/>
        </foreach>
    </flow>    
</mule>